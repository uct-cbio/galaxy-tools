#!/usr/bin/python
# Replace a pattern in a lince. Calls the system command sed.
# example usage:
#                ./sed.py  -i /path_to/in.txt -o /path_to/out.tgxt -s "s/ .*$//g" 

import sys
import re
import string
import commands
import os
from optparse import OptionParser

def main():
    
    usage = "usage: %prog -i INPUTFILE -o OUTPUTFILE -s SUBSTITUTE"
    parser = OptionParser(usage=usage)
    parser.add_option("-i", "--input_fasta", dest="input_file", help="Text input file")
    parser.add_option("-o", "--output_fasta", dest="output_file", help="Matching or NON-matching output file, depending on -v flag")
    parser.add_option("-s", "--substitute", dest="pattern", help="Substitute pattern")
    (options, args) = parser.parse_args()
    
    if not options.input_file:
        print "Please specify the text input file (-i INPUTFILE)"
        return - 1
    if not options.output_file:
        print "Please specify the output file (-o OUTPUFILE)"
        return - 2
    if not options.pattern:
        print "Please specify the matching pattern (-s SUBSTITUTE)"
        return - 3
    if (len(args) > 0):
        print "Too many arguments given"
        return - 4
    
    input_file = options.input_file
    output_file = options.output_file
    pattern = options.pattern

    # input strings generated by browser/galaxy needs to be replaced
    mapped_chars = { '>' :'__gt__',
                 '<' :'__lt__',
                 '\'' :'__sq__',
                 '"' :'__dq__',
                 '[' :'__ob__',
                 ']' :'__cb__',
         '{' :'__oc__',
                 '}' :'__cc__',
                 }

    for key, value in mapped_chars.items():
        pattern = pattern.replace(value, key)

    pattern = pattern.replace('"', '\\"')
    pattern = pattern.replace("'", "\'")

    projectRegEx = re.compile("^[A-Za-z0-9./\-_]+$")
    fileRegEx = re.compile("^[A-Za-z0-9./\-_]+$")
    invertRegEx = re.compile("(true)|(false)")

    if not fileRegEx.match(output_file):
	   print "Illegal output filename."
	   return - 5
    if not fileRegEx.match(input_file):
	   print "Illegal input filename."
	   return - 6

    os.system("sed \"" + pattern + "\" " + input_file + " > " + output_file)
    
    return 0

if __name__ == "__main__":
    sys.exit(main())
