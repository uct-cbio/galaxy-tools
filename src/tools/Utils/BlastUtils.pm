#! /usr/bin/perl -w
package Utils::BlastUtils;
use Bio::SearchIO;
use Bio::SearchIO::blastxml;
use Bio::SearchIO::blast;
use Bio::SearchIO::Writer::HitTableWriter;
use Bio::SearchIO::Writer::HTMLResultWriter;
use Bio::SearchIO::Writer::ResultTableWriter;
use Bio::SearchIO::Writer::TextResultWriter;
use Bio::SearchIO::Writer::HSPTableWriter;
use strict;
use warnings;

## Split file with a list of pairwise blast reports into individual blast reports ###
#################### Blast report originaly generated by -m 0 #######################
sub split_pairwise_blast_report() {
	my $file         = shift(@_);
	my $dir          = shift(@_);
	my $blast_report = "";
	my $filename     = undef;
	open( BLASTFILE, "$file" ) || die "Can't open $file\n";

	while ( my $line = <BLASTFILE> ) {
		if ( $line =~ /^BLAST/ ) {
			if ( defined($filename) ) {
				open( OUTFILE, ">$dir/$filename.bls" );
				print OUTFILE "$blast_report\n";
				close OUTFILE;
			}
			$blast_report = $line;
		}
		else {
			$blast_report = $blast_report . $line;

			#			if ( $line =~ /^Query= (.+)/ ) {
			#			if ( $line =~ /^Query= (.+?)\s.*/ ) {
			if ( $line =~ /^Query= ([a-zA-Z\.0-9_-]*).*/ ) {
				$filename = $1;
				print "$filename\n";
			}
		}

	}

	# Print last record to file
	open( OUTFILE, ">$dir/$filename.bls" );
	print OUTFILE "$blast_report\n";
	close OUTFILE;
}
############################ End split_pairwise_blast_report() ######################

## Split file with a list of xml blast reports into individual blast reports ########
#################### Blast report originaly generated by -m 7 #######################
sub split_xml_blast_report() {
	my $file         = shift(@_);
	my $dir          = shift(@_);
	my $blast_report = "";
	my $filename     = undef;
	open( BLASTFILE, "$file" ) || die "Can't open $file\n";

	while ( my $line = <BLASTFILE> ) {
		if ( $line =~ /^<\?xml version/ ) {
			if ( defined($filename) ) {
				open( OUTFILE, ">$dir/$filename.xml" );
				print OUTFILE "$blast_report\n";
				close OUTFILE;
			}
			$blast_report = $line;
		}
		else {
			$blast_report = $blast_report . $line;

#			if ( $line =~ /.*<BlastOutput_query-def>(.*)<\/BlastOutput_query-def>/ ) { # get the whole header
#		if ( $line =~ /.*<BlastOutput_query-def>(.+?)\s.*<\/BlastOutput_query-def>/ ) { # get only the part before a space, do not work if header exists only of 1 word string
			if ( $line =~
/.*<BlastOutput_query-def>([a-zA-Z\.0-9_-]*).*<\/BlastOutput_query-def>/
			  )
			{    # get the first string which contains these characters
				$filename = $1;
			}
		}

	}

	# Print last record to file
	open( OUTFILE, ">$dir/$filename.xml" );
	print OUTFILE "$blast_report\n";
	close OUTFILE;

}
############################ End split_xml_blast_report() ##########################

## Split file with a list of xml blast reports into individual blast reports ########
#################### Blast report originaly generated by -m 7 #######################
sub split_xml_blast_report_iterations() {
	my $file         = shift(@_);
	my $dir          = shift(@_);
	my $blast_report = "";
	my $filename     = undef;
	open( BLASTFILE, "$file" ) || die "Can't open $file\n";

	while ( my $line = <BLASTFILE> ) {
		if ( $line =~ /^<\?xml version/ ) {
			if ( defined($filename) ) {
				open( OUTFILE, ">$dir/$filename.xml" );
				print OUTFILE "$blast_report\n";
				close OUTFILE;
			}
			$blast_report = $line;
		}
		else {
			$blast_report = $blast_report . $line;
			if ( $line =~
/.*<Iteration_query-def>([a-zA-Z\.0-9_-]*).*<\/Iteration_query-def>/
			  )
			{    # get the first string which contains these characters
				$filename = $1;
			}
		}

	}

	# Print last record to file
	open( OUTFILE, ">$dir/$filename.xml" );
	print OUTFILE "$blast_report\n";
	close OUTFILE;

}
############################ End split_xml_blast_report() ##########################

## Split file with a list of asn blast reports into individual blast reports ########
#################### Blast report originaly generated by -m 10 ######################
sub split_asn_blast_report() {
	my $file = shift(@_);
	my $dir  = shift(@_);
}
############################ End split_asn_blast_report() ###########################

## Split file with a list of tabular blast reports into individual blast reports ####
#################### Blast report originaly generated by -m 9 #######################
sub split_tab_blast_report() {
	my $file = shift(@_);
	my $dir  = shift(@_);
}
############################ End split_tab_blast_report() ##########################

########### Write blast report in HTML format. Better visualisation. ###############
#################### blast and blastxml format are supported #######################
sub write_html_blast_report() {
	my $file_in  = shift(@_);
	my $format   = shift(@_);
	my $file_out = shift(@_);
	my $blast_io = new Bio::SearchIO(
		-format => $format,
		-file   => $file_in
	);

	my $html_writer = new Bio::SearchIO::Writer::HTMLResultWriter();
	my $html_io =
	  new Bio::SearchIO( -writer => $html_writer, -file => ">$file_out" );

	while ( my $result = $blast_io->next_result() ) {
		$html_io->write_result($result);
	}
}
############################ End write_html_blast_report() ##########################

######  Write allignment in gff output. Can then be exported to eg. gbrowse. #######
#### Currently only possible for blastn generated reports ##########################
sub write_gff() {
	my $file_in  = shift(@_);
	my $format   = shift(@_);
	my $file_out = shift(@_);
	my $blast_io = new Bio::SearchIO(
		-format => $format,
		-file   => $file_in
	);

	my $gff_io = new Bio::SearchIO(
		-output_format => 'GbrowseGFF',
		-output_cigar  => 1,
		-output_signif => 1,
		-file          => ">$file_out"
	);

	while ( my $result = $blast_io->next_result() ) {
		$gff_io->write_result($result);
	}
}
############################ End write_gff() #######################################

#########################  Write a table with high scoreing pairs. #################
sub write_hsp_table() {
	my $file_in  = shift(@_);
	my $format   = shift(@_);
	my $file_out = shift(@_);
	my $blast_io = new Bio::SearchIO(
		-format => $format,
		-file   => $file_in
	);

	my $hit_table_writer =
	  Bio::SearchIO::Writer::HSPTableWriter->new();    # use default column map

	my $hsp_io =
	  Bio::SearchIO->new( -writer => $hit_table_writer, -file => ">$file_out" );

	while ( my $result = $blast_io->next_result() ) {
		$hsp_io->write_result( $result,
			( $blast_io->report_count - 1 ? 0 : 1 ) );
	}
}
############################ End write_hsp_table() ##################################

#########################  Write a table with high hits #############################
sub write_hit_table() {
	my $file_in  = shift(@_);
	my $format   = shift(@_);
	my $file_out = shift(@_);
	my @columns  = @_;                  # gets everythin else
	my $blast_io = new Bio::SearchIO(
		-format => $format,
		-file   => $file_in
	);

   #	my $hit_table_writer =
   #	  Bio::SearchIO::Writer::HitTableWriter->new();    # use default column map

	#		my $hit_table_writer =  Bio::SearchIO::Writer::HitTableWriter->new(
	#	                                  -columns => [qw(query_name
	#	                                                  query_length
	#	                                                  hit_name
	#	                                                  hit_length
	#	                                                  frac_identical_query
	#	                                                  expect
	#	                                                  )]  );
	my $hit_table_writer =
	  Bio::SearchIO::Writer::HitTableWriter->new( -columns => [@columns] );

	my $hit_io =
	  Bio::SearchIO->new( -writer => $hit_table_writer, -file => ">$file_out" );

	while ( my $result = $blast_io->next_result() ) {
		$hit_io->write_result( $result,
			( $blast_io->result_count - 1 ? 0 : 1 ) );
	}
}
############################ End write_hit_table() ##################################

#########################  Write result table. ######################################
sub write_result_table() {
	my $file_in  = shift(@_);
	my $format   = shift(@_);
	my $file_out = shift(@_);
	my $blast_io = new Bio::SearchIO(
		-format => $format,
		-file   => $file_in
	);

	my $result_table_writer =
	  Bio::SearchIO::Writer::ResultTableWriter->new();  # use default column map

	#	my $result_table_writer = Bio::SearchIO::Writer::ResultTableWriter->new(
	#		-columns => [
	#			qw(
	#			  query_name
	#			  query_length
	#			  num_hits
	#			  )
	#		]
	#	);

	my $result_io = Bio::SearchIO->new(
		-writer => $result_table_writer,
		-file   => ">$file_out"
	);

	while ( my $result = $blast_io->next_result() ) {
		$result_io->write_result( $result,
			( $blast_io->result_count - 1 ? 0 : 1 ) );
	}
}
############################ End write_result_table() ###############################

#########################  Write a pairwise blast report. ###########################
sub write_pairwise_blast_report() {
	my $file_in  = shift(@_);
	my $format   = shift(@_);
	my $file_out = shift(@_);
	my $blast_io = new Bio::SearchIO(
		-format => $format,
		-file   => $file_in
	);

	my $algorithm_version = "";

	my $text_writer = new Bio::SearchIO::Writer::TextResultWriter();
	my $text_io =
	  new Bio::SearchIO( -writer => $text_writer, -file => ">$file_out" );

	while ( my $result = $blast_io->next_result() ) {
		$algorithm_version = $result->algorithm_version;
		$text_io->write_result($result);
	}

	# Need to add BLAST header to file
	# Necessarry if pairwise file need to be split
	if ( $format eq 'blastxml' ) {
		system "echo \"$algorithm_version\n\" > $file_out.tmp";
		system "cat $file_out >>  $file_out.tmp";
		system "mv $file_out.tmp  $file_out";
	}

}
############################ End write_pairwise_blast_report() ######################

#########################  Write BSML result. #######################################
sub write_bsml_result() {
	my $file_in  = shift(@_);
	my $format   = shift(@_);
	my $file_out = shift(@_);
	my $blast_io = new Bio::SearchIO(
		-format => $format,
		-file   => $file_in
	);

	my $bsml_io = new Bio::SearchIO(
		-output_format => 'BSMLResultWriter',
		-file          => ">$file_out"
	);

	while ( my $result = $blast_io->next_result() ) {
		$bsml_io->write_result($result);
	}
}
############################ End write_bsml_result() ################################

#########################  Write a xml blast report. ################################
sub write_xml_blast_report() {
	my $file_in  = shift(@_);
	my $format   = shift(@_);
	my $file_out = shift(@_);
	my $blast_io = new Bio::SearchIO(
		-format => $format,
		-file   => $file_in
	);
}
############################ End write_xml_blast_report() ##########################

########### Get individual hit results from blast report ############################
sub split_blast_hits() {

}
############################ End split_blast_hits() #################################

########### Get only tge hits for a specific organism ###############################
sub get_specific_blast_hits() {

}
############################ End get_specific_blast_hits() ##########################

#########################  Write a table with best hits #############################
sub write_best_hit_table() {
	my $file_in  = shift(@_);
	my $format   = shift(@_);
	my $file_out = shift(@_);
	my $top_hits = 1; # can later get this as input from user
	my $count = 0;
	my $blast_io = new Bio::SearchIO(
		-format => $format,
		-file   => $file_in
	);

	my $header =
"Query name\tQuery accession\tQuery description\tQuery length\tBest hit\tHit Length\tIdentities\tSignificance\tDescription";
	open( my $fd_out, ">$file_out" );
	print $fd_out "$header\n";

	while ( my $result = $blast_io->next_result ) {
		while ( my $hit = $result->next_hit ) {
			$count+=1;
			print $fd_out $result->query_name . "\t";
			print $fd_out $result->query_accession . "\t";
			print $fd_out $result->query_description . "\t";
			print $fd_out $result->query_length . "\t";
			print $fd_out $hit->name() . "\t";
			print $fd_out $hit->length() . "\t";
			print $fd_out $hit->matches('id') . "\t";
			print $fd_out $hit->significance() . "\t";
			print $fd_out $hit->description() . "\n";
			if($count == $top_hits){
				last;                                  # from now only read first hit $top_hits == 1
			}
		}
		
		if($count == 0){ # there were no hits, for now do not print anything
#			print $fd_out $result->query_name . "\t";
#			print $fd_out $result->query_accession . "\t";
#			print $fd_out $result->query_description . "\t";
#			print $fd_out $result->query_length . "\t";
#			print $fd_out  " \t \t \t \t \n"; 
		}
		
		$count = 0; 
	}

	close $fd_out;

}
############################ End write_hit_table() ##################################

1;
