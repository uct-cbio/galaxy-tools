#!/usr/bin/python

# Retrieve a list of GI numbers from NCBI based on an Entrez query. 

# The Entrez egquery function are used to retrieve the number of sequences. Using this number the Entrez esearch function are used to retrieve the GI list.

# GI records from the following databases can be retrieved.
# genes
# snp
# popset
# sequences: 
#  -genome
#  - nucleotide:
#   - nuccore
#   - nucest
#   - nucgss
# - protein
# sra

# ncbi_entrez_download_gi_list.py -m gerrit@cbio.uct.ac.za -d nuccore -e "Cypripedioideae[Orgn] AND matK[Gene]" -s gi_list.csv

import sys
import os
import string
import re
from optparse import OptionParser
from Bio import Entrez

def main():

    usage = "usage: %prog -m EMAIL -d DATABASE -e ENTREZ_QUERY -s SEQID_FILE"
    parser = OptionParser(usage=usage)
    parser.add_option("-m", "--email", dest="email", help="Email address. Need to provide this when doing an Entrez search and fetch")
    parser.add_option("-d", "--database", dest="database", help="Database e.g. nuccore")
    parser.add_option("-e", "--entrez_query", dest="entrez_query", help="Entrez query e.g. \"Bacteria\"[Organism] OR \"Archaea\"[Organism] OR prokaryotes[All Fields] not \"Escherichia coli\"[Organism]")
    parser.add_option("-s", "--seqid_file", dest="seqid_file", help="List of sequence ids")
    
    (options, args) = parser.parse_args()
    
    if not options.email:
        print "Please specify an email address. Need to provide this when doing an Entrez search or fetch (-m EMAIL)"
        return - 1
    if not options.database:
        print "Please specify the database to fetch info from (-d DATABASE)"
        return - 2
    if not options.entrez_query:
        print "Please specify give an entrez query (-e ENTREZ_QUERY)"
        return - 3
    if not options.seqid_file:
        print "Please specify the sequence ids list output file (-s SEQID_FILE)"
        return - 4
    if (len(args) > 0):
        print "Too many arguments"
        return - 5

    # Input strings generated by browser/galaxy needs to be replaced
    mapped_chars = { '>' :'__gt__',
                 '<' :'__lt__',
                 '\'' :'__sq__',
                 '"' :'__dq__',
                 '[' :'__ob__',
                 ']' :'__cb__',
         '{' :'__oc__',
                 '}' :'__cc__',
                 '@' :'__at__',
    }

    email = options.email
    database = options.database
    entrez_query = options.entrez_query
    seqid_file = options.seqid_file
    
    for key, value in mapped_chars.items():
        email = email.replace(value, key)
        database = database.replace(value, key)
        entrez_query = entrez_query.replace(value, key)
        
    Entrez.email = email
    
    nr_seq_query = 0
    
    if database == 'nucleotide': # A nucleotide search is converted to a nuccore search. There is no nucleotide database entry in an egquery search.
        database = 'nuccore'
    
    # First get the number of returned queries
    try:
        handle = Entrez.egquery(term=entrez_query)
        results = Entrez.read(handle)
        for row in results["eGQueryResult"]:
            if row["DbName"] == database:
                nr_seq_query = row["Count"]
    except Exception, e:
        print ("Error raised when trying do an Entrez.egquery: %s\n" % str(e))
        sys.exit( "Error raised! Exiting now!")
    
    # Fetch the GI list
    try:
        if (database == 'nuccore' or database == 'nucest' or database == 'nucgss'):
            database = 'nucleotide'
        handle = Entrez.esearch(db=database,term=entrez_query, retmax=nr_seq_query)
        results = Entrez.read(handle)
        gi_list = results["IdList"]
        handle.close()
    except Exception, e:
        print ("Error raised when trying do an Entrez.esearch: %s\n" % str(e))
        sys.exit( "Error raised! Exiting now!")
    
    # Write the list
    seqid_file_fd = open(seqid_file,'w')
    for gi in gi_list:
        seqid_file_fd.write(gi + '\n')
    seqid_file_fd.close()
    
if __name__ == "__main__":
    sys.exit(main())

  
